// <auto-generated />
using System;
using MSG.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MCG.Profile.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250320174837_Az-Patient")]
    partial class AzPatient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MCG.Profile.API.Models.Domain.PatientHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatDateOfBirth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatEmergencyContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatEmergencyContactEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatEmergencyContactPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatGender")
                        .HasColumnType("int");

                    b.Property<string>("PatLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HistoryID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientHistory");
                });

            modelBuilder.Entity("MSG.API.Models.Domain.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatDateOfBirth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatEmergencyContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatEmergencyContactEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatEmergencyContactPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatGender")
                        .HasColumnType("int");

                    b.Property<string>("PatLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatMiddleName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PatPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientID");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            PatientID = 1000,
                            DateCreated = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            PatAddress = "6110 Sturbridge lane",
                            PatCity = "Cumming",
                            PatDateOfBirth = "06/07/1935",
                            PatEmail = "ghabdo@att.net",
                            PatEmergencyContact = "Janet",
                            PatEmergencyContactEmail = "jnet@net.com",
                            PatEmergencyContactPhone = "2162251525",
                            PatFirstName = "Georges",
                            PatGender = 0,
                            PatLastName = "Whiteman",
                            PatMiddleName = "H",
                            PatPhoneNumber = "2162251525",
                            PatState = "Georgia",
                            PatZipCode = 30040
                        },
                        new
                        {
                            PatientID = 1001,
                            DateCreated = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            PatAddress = "6110 Sturbridge lane",
                            PatCity = "Alpahretta",
                            PatDateOfBirth = "06/07/1935",
                            PatEmail = "jacko@att.net",
                            PatEmergencyContact = "Ghazi",
                            PatEmergencyContactEmail = "Jackt@net.com",
                            PatEmergencyContactPhone = "2162251525",
                            PatFirstName = "Jack",
                            PatGender = 0,
                            PatLastName = "Sheriff",
                            PatMiddleName = "M",
                            PatPhoneNumber = "2162251525",
                            PatState = "Georgia",
                            PatZipCode = 30040
                        });
                });

            modelBuilder.Entity("MCG.Profile.API.Models.Domain.PatientHistory", b =>
                {
                    b.HasOne("MSG.API.Models.Domain.Patient", null)
                        .WithMany("PatientHistory")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MSG.API.Models.Domain.Patient", b =>
                {
                    b.Navigation("PatientHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
